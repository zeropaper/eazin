{"version":3,"sources":["webpack://[name]/./src/components/Form/FieldSet.jsx","webpack://[name]/./src/components/Form/TextField.jsx","webpack://[name]/./src/components/Form/ButtonsGroup.jsx","webpack://[name]/./src/components/Form/FormBase.jsx","webpack://[name]/./src/core/plugins.propTypes.js","webpack://[name]/./src/plugins/companies/companies.actions.js","webpack://[name]/./src/plugins/companies/CompaniesView.jsx","webpack://[name]/./src/components/Form/Fields.jsx"],"names":["FieldSet","label","fields","field","classes","className","state","api","classNames","root","legend","component","defaultProps","withStyles","theme","border","borderStyle","borderColor","palette","grey","margin","spacing","padding","InformedTextField","fieldState","fieldApi","props","value","touched","setValue","setTouched","onChange","onBlur","initialValue","forwardedRef","defaultValue","helperText","rest","fieldValue","errorText","error","asyncError","name","inputRef","inputProps","e","target","asField","ButtonsGroup","style","buttons","map","info","children","text","key","variant","type","color","display","alignItems","justifyContent","marginLeft","FormBase","errors","handleSubmit","async","onSubmit","onSuccess","onFailure","method","url","processFields","userToken","processed","headers","Authorization","queryAPI","toUpperCase","body","JSON","stringify","result","setState","message","renderFields","formState","formApi","fieldClassName","render","this","noValidate","React","Component","View","history","PropTypes","shape","push","func","isRequired","match","params","any","upsertCompany","payload","schema","required","validate","val","trim","undefined","validateOnChange","validateOnBlur","disabled","pristine","CompaniesView","dispatch","loaded","companies","data","id","Object","keys","filter","Boolean","connect","settings","Fields","prefix","subFields","subField"],"mappings":"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","file":"CompaniesView.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Typography } from '@material-ui/core';\nimport { withStyles } from '@material-ui/core/styles';\nimport classNames from 'classnames';\n\n// eslint-disable-next-line import/no-cycle\nimport Fields from './Fields';\n\nconst styles = (theme) => ({\n  root: {\n    border: 1,\n    borderStyle: 'solid',\n    borderColor: theme.palette.grey[500],\n    margin: `${theme.spacing(1)}px 0`,\n    padding: theme.spacing(1),\n  },\n  legend: {\n    padding: theme.spacing(1),\n  },\n});\n\nconst FieldSet = ({\n  label,\n  fields,\n  field,\n  classes,\n  className,\n  state,\n  api,\n}) => (\n  <fieldset className={classNames(classes.root, className)}>\n    <Typography className={classes.legend} component=\"legend\">\n      {label}\n    </Typography>\n\n    <div>\n      <Fields state={state} api={api} fields={fields} field={field} />\n    </div>\n  </fieldset>\n);\n\nFieldSet.propTypes = {\n  classes: PropTypes.objectOf(PropTypes.string).isRequired,\n  label: PropTypes.string.isRequired,\n  fields: PropTypes.objectOf(PropTypes.object).isRequired,\n  state: PropTypes.objectOf(PropTypes.any).isRequired,\n  api: PropTypes.objectOf(PropTypes.any).isRequired,\n  className: PropTypes.string,\n  field: PropTypes.string,\n};\n\nFieldSet.defaultProps = {\n  field: null,\n  className: null,\n};\n\nexport default withStyles(styles)(FieldSet);\n","/* eslint-disable react/jsx-props-no-spreading */\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { asField } from 'informed';\nimport { TextField } from '@material-ui/core';\n\nconst InformedTextField = ({ fieldState, fieldApi, ...props }) => {\n  const { value, touched } = fieldState;\n  const { setValue, setTouched } = fieldApi;\n  const {\n    onChange,\n    onBlur,\n    initialValue,\n    defaultValue: droppedDefaultValue,\n    forwardedRef,\n    helperText,\n    ...rest\n  } = props;\n\n  const defaultValue = !touched && initialValue ? initialValue : '';\n  const fieldValue = (value || value === 0) ? value : defaultValue;\n\n  // eslint-disable-next-line react/destructuring-assignment\n  const errorText = props.error || fieldState.error || fieldState.asyncError;\n  return (\n    <TextField\n      {...rest}\n      name={rest.field}\n      inputRef={forwardedRef}\n      value={fieldValue}\n      inputProps={{\n        onChange: (e) => {\n          setValue(e.target.value);\n          if (onChange) onChange(e);\n        },\n        onBlur: (e) => {\n          setTouched(true);\n          if (onBlur) onBlur(e);\n        },\n      }}\n      helperText={errorText || helperText}\n      error={!!errorText}\n    />\n  );\n};\n\nInformedTextField.propTypes = {\n  fieldState: PropTypes.objectOf(PropTypes.any).isRequired,\n  fieldApi: PropTypes.objectOf(PropTypes.any).isRequired,\n  // eslint-disable-next-line react/forbid-prop-types\n  forwardedRef: PropTypes.object,\n  onChange: PropTypes.func,\n  onBlur: PropTypes.func,\n  error: PropTypes.string,\n  helperText: PropTypes.string,\n  initialValue: PropTypes.oneOf([PropTypes.string, PropTypes.number]),\n  defaultValue: PropTypes.oneOf([PropTypes.string, PropTypes.number]),\n};\n\nInformedTextField.defaultProps = {\n  forwardedRef: null,\n  onChange: null,\n  onBlur: null,\n  error: null,\n  helperText: null,\n  initialValue: null,\n  defaultValue: null,\n};\n\nexport default asField(InformedTextField);\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport Button from '@material-ui/core/Button';\nimport classNames from 'classnames';\nimport withStyles from '@material-ui/core/styles/withStyles';\n\nconst ButtonsGroup = ({\n  style = null,\n  className = null,\n  buttons = [],\n  classes,\n} = {\n  style: null,\n  className: null,\n  buttons: [],\n  classes: {},\n}) => (\n  <div\n    style={style}\n    className={classNames(className, classes.root)}\n  >\n    {buttons.map((info) => {\n      const {\n        children,\n        text,\n        key,\n        ...rest\n      } = info;\n\n      const props = {\n        key: key || text,\n        variant: 'contained',\n        type: 'button',\n        color: 'primary',\n        ...rest,\n      };\n\n      return (\n        <Button {...props}>{children || text}</Button>\n      );\n    })}\n  </div>\n);\n\nButtonsGroup.propTypes = {\n  style: PropTypes.objectOf(PropTypes.object),\n  className: PropTypes.string,\n  classes: PropTypes.objectOf(PropTypes.string).isRequired,\n  buttons: PropTypes.arrayOf(PropTypes.shape({\n    key: PropTypes.string,\n    text: PropTypes.string,\n    onClick: PropTypes.func,\n    variant: PropTypes.string,\n    color: PropTypes.string,\n    type: PropTypes.string,\n    disabled: PropTypes.bool,\n  })),\n};\n\nButtonsGroup.defaultProps = {\n  style: null,\n  className: null,\n  buttons: [],\n};\n\nexport default withStyles((theme) => ({\n  root: {\n    display: 'flex',\n    alignItems: 'center',\n    justifyContent: 'flex-end',\n    '& > button': {\n      marginLeft: theme.spacing(2),\n    },\n  },\n}))(ButtonsGroup);\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Form as Informed } from 'informed';\n\nimport queryAPI from '../../core/util/queryAPI';\nimport Fields from './Fields';\n\nclass FormBase extends React.Component {\n  state = {\n    errors: null,\n    error: null,\n  };\n\n  handleSubmit = async (fields) => {\n    const {\n      onSubmit,\n      onSuccess,\n      onFailure,\n      method,\n      url,\n      processFields,\n      userToken,\n    } = this.props;\n    try {\n      const processed = typeof processFields === 'function'\n        ? processFields(fields)\n        : fields;\n\n      if (onSubmit) {\n        await onSubmit(processed);\n        return;\n      }\n\n      if (method && url) {\n        const headers = { 'Content-Type': 'application/json' };\n        if (userToken) headers.Authorization = `Bearer ${userToken}`;\n        const result = await queryAPI(url, {\n          method: method.toUpperCase(),\n          body: JSON.stringify(processed),\n          headers,\n        });\n        if (typeof onSuccess === 'function') onSuccess(result);\n      }\n    } catch (err) {\n      this.setState({\n        errors: err.fields || {},\n        error: err.message,\n      });\n      if (typeof onFailure === 'function') onFailure(err);\n      throw err;\n    }\n  };\n\n  // eslint-disable-next-line no-unused-vars\n  renderFields = ({ formState, formApi }) => {\n    const { fields, fieldClassName } = this.props;\n    // eslint-disable-next-line no-unused-vars\n    const { errors, error } = this.state;\n\n    // // eslint-disable-next-line no-console\n    // console.info('errors, error', errors, error);\n\n    return (\n      <Fields\n        fields={fields}\n        fieldClassName={fieldClassName}\n        state={formState}\n        api={formApi}\n      />\n    );\n  };\n\n  render() {\n    const {\n      render,\n    } = this.props;\n\n    return (\n      <Informed\n        onSubmit={this.handleSubmit}\n        noValidate\n        render={render || this.renderFields}\n      />\n    );\n  }\n}\n\nFormBase.propTypes = {\n  method: PropTypes.string,\n  url: PropTypes.string,\n  processFields: PropTypes.func,\n  onSubmit: PropTypes.func,\n  onSuccess: PropTypes.func,\n  onFailure: PropTypes.func,\n  fields: PropTypes.objectOf(PropTypes.object).isRequired,\n  render: PropTypes.func,\n  fieldClassName: PropTypes.string,\n  userToken: PropTypes.string,\n};\n\nFormBase.defaultProps = {\n  method: null,\n  url: null,\n  processFields: null,\n  onSubmit: null,\n  onSuccess: null,\n  onFailure: null,\n  render: null,\n  fieldClassName: null,\n  userToken: null,\n};\n\nexport default FormBase;\n","import PropTypes from 'prop-types';\n\nexport const View = {\n  history: PropTypes.shape({\n    push: PropTypes.func.isRequired,\n  }),\n  match: PropTypes.shape({\n    params: PropTypes.any,\n  }),\n};\n\nexport const HeaderTabs = {\n  ...View,\n};\n\nexport const Drawer = {\n  ...View,\n};\n","export const upsertCompany = (payload) => ({ type: 'UPSERT_COMPANY', payload });\n\nexport const upsertCompanies = (payload) => ({ type: 'UPSERT_COMPANIES', payload });\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\n\nimport { Typography } from '@material-ui/core';\nimport { View as ViewPropTypes } from '../../core/plugins.propTypes';\nimport { upsertCompanies, upsertCompany } from './companies.actions';\nimport queryAPI from '../../core/util/queryAPI';\nimport Form from '../../components/Form/FormBase';\n\nconst notEmpty = (val) => (val && val.trim() ? undefined : 'A value is required');\n\nconst required = {\n  required: true,\n  validate: notEmpty,\n  validateOnChange: true,\n  validateOnBlur: true,\n};\nconst schema = {\n  name: {\n    label: 'Name',\n    ...required,\n  },\n  buttons: {\n    // eslint-disable-next-line no-unused-vars\n    buttons: (state, api, field, fields) => [\n      {\n        disabled: state.pristine,\n        type: 'reset',\n        text: 'Reset',\n        color: 'default',\n      },\n      {\n        disabled: state.pristine || state.error,\n        text: 'Ok',\n      },\n    ],\n  },\n};\n\nclass CompaniesView extends React.Component {\n  async componentDidMount() {\n    const { userToken, dispatch } = this.props;\n\n    const loaded = await queryAPI('/api/companies', {\n      headers: {\n        'content-type': 'application/json',\n        Authorization: `Bearer ${userToken}`,\n      },\n    });\n\n    dispatch(upsertCompanies(loaded));\n  }\n\n  render() {\n    const {\n      companies,\n      dispatch,\n      history: { push },\n      userToken,\n    } = this.props;\n\n    return (\n      <>\n        <header>\n          <Typography variant=\"h2\">Companies</Typography>\n        </header>\n\n        <Form\n          userToken={userToken}\n          fields={schema}\n          method=\"post\"\n          url=\"/api/companies\"\n          onSuccess={(data) => {\n            dispatch(upsertCompany(data));\n            push(`/companies/${data.id}`);\n          }}\n          // onFailure={(...args) => console.info('failed', ...args)}\n        />\n\n        {Object.keys(companies)\n          .filter(Boolean)\n          .map((id) => id && (\n            <section key={id}>\n              <header>\n                <h1>\n                  {companies[id].name}\n                </h1>\n              </header>\n\n              <div>\n                <Form\n                  userToken={userToken}\n                  fields={schema}\n                  method=\"patch\"\n                  url={`/api/companies/${id}`}\n                  onSuccess={(data) => {\n                    dispatch(upsertCompany(data));\n                  }}\n                  // onFailure={(...args) => console.info('failed', ...args)}\n                />\n              </div>\n            </section>\n          ))}\n      </>\n    );\n  }\n}\n\nCompaniesView.propTypes = {\n  ...ViewPropTypes,\n  companies: PropTypes.objectOf(PropTypes.object).isRequired,\n  dispatch: PropTypes.func.isRequired,\n};\n\nconst mapStateToProps = ({\n  companies,\n  settings: { userToken },\n}) => ({\n  companies,\n  userToken,\n});\n\nexport default connect(mapStateToProps)(CompaniesView);\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\n// eslint-disable-next-line import/no-cycle\nimport FieldSet from './FieldSet';\nimport TextField from './TextField';\nimport ButtonsGroup from './ButtonsGroup';\n\nconst Fields = ({\n  fields,\n  field: prefix = '',\n  state,\n  api,\n}) => Object.keys(fields)\n  .map((field) => {\n    const props = fields[field];\n\n    const {\n      type,\n      label,\n      fields: subFields = {},\n      buttons,\n      className,\n    } = props;\n\n    const subField = prefix ? `${prefix}.${field}` : field;\n\n    if (type === 'fieldset') {\n      return (\n        <FieldSet\n          key={field}\n          label={label}\n          fields={subFields}\n          field={subField}\n          state={state}\n          api={api}\n          className={className}\n        />\n      );\n    }\n\n    if (type === 'fields') {\n      return (\n        <Fields\n          key={field}\n          label={label}\n          fields={subFields}\n          field={subField}\n          state={state}\n          api={api}\n          className={className}\n        />\n      );\n    }\n\n    if (buttons) {\n      return (\n        <ButtonsGroup\n          key={field}\n          buttons={typeof buttons === 'function' ? buttons(state, api, field, fields) : buttons}\n          className={className}\n        />\n      );\n    }\n\n    return (\n      <TextField {...props} key={field} field={subField} />\n    );\n  })\n  .filter(Boolean);\n\nFields.propTypes = {\n  fields: PropTypes.objectOf(PropTypes.shape({\n    type: PropTypes.string,\n    label: PropTypes.string,\n    fields: PropTypes.object,\n    buttons: PropTypes.oneOfType([\n      PropTypes.arrayOf(PropTypes.object),\n      PropTypes.func,\n    ]),\n    className: PropTypes.string,\n  })).isRequired,\n  field: PropTypes.string,\n  className: PropTypes.string,\n  state: PropTypes.objectOf(PropTypes.any).isRequired,\n  api: PropTypes.objectOf(PropTypes.any).isRequired,\n};\n\nFields.defaultProps = {\n  field: undefined,\n  className: null,\n};\n\nexport default Fields;\n"],"sourceRoot":""}