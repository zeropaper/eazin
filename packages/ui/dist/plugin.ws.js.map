{"version":3,"sources":["webpack://[name]/./src/plugins/ws/index.js"],"names":["log","logger","wsBootstrap","socket","dispatch","getState","forEach","evtName","on","status","ws","connected","type","payload","bootstrap","plugins","userToken","settings","io","done","Object","keys","name","plugin","reducers","state","action"],"mappings":";;;;;;;;;;;;;;;;AAAA;AAEA;AAEA,IAAMA,GAAG,GAAGC,iEAAM,CAAC,IAAD,EAAO,MAAP,CAAlB;;AAEA,IAAMC,WAAW,GAAG,SAAdA,WAAc,CAACC,MAAD,EAASC,QAAT,EAAmBC,QAAnB,EAAgC;AAClD;AACA,GACE,SADF,EAEE,eAFF,EAGE,iBAHF,EAIE,OAJF,EAKE,YALF,EAME,WANF,EAOE,mBAPF,EAQE,cARF,EASE,iBATF,EAUE,kBAVF,CAWE;AACA;AAZF,IAaEC,OAbF,CAaU,UAACC,OAAD;AAAA,WAAaJ,MAAM,CAACK,EAAP,CAAUD,OAAV,EAAmB,YAAM;AAC9CP,SAAG,mBAAWO,OAAX,QAAH;;AAD8C,sBAEnBF,QAAQ,EAFW;AAAA,UAEhCI,MAFgC,aAEtCC,EAFsC,CAEhCD,MAFgC;;AAI9C,UAAIA,MAAM,KAAKN,MAAM,CAACQ,SAAtB,EAAiC;AAC/BP,gBAAQ,CAAC;AAAEQ,cAAI,EAAE,eAAR;AAAyBC,iBAAO,EAAEV,MAAM,CAACQ;AAAzC,SAAD,CAAR;AACD;AACF,KAPsB,CAAb;AAAA,GAbV;AAqBD,CAvBD;;AAyBA,IAAMG,SAAS,GAAG,SAAZA,SAAY,OAEfV,QAFe,EAELC,QAFK,EAEKU,OAFL,EAEiB;AAAA,MADrBC,SACqB,QADjCC,QACiC,CADrBD,SACqB;AACjChB,KAAG,CAAC,cAAD,EAAiB,CAAC,CAACgB,SAAnB,CAAH;AACA,MAAI,CAACA,SAAL,EAAgB;AAChB,MAAMb,MAAM,GAAGe,uDAAE,EAAjB;AAEAf,QAAM,CAACK,EAAP,CAAU,OAAV,EAAmB,UAACK,OAAD,EAAUM,IAAV;AAAA,WAAmBA,IAAI,EAAvB;AAAA,GAAnB;AAEAC,QAAM,CAACC,IAAP,CAAYN,OAAZ,EAAqBT,OAArB,CAA6B,UAACgB,IAAD,EAAU;AACrC,QAAI,OAAOP,OAAO,CAACO,IAAD,CAAP,CAAcpB,WAArB,KAAqC,UAAzC,EAAqD;AACrD,QAAMqB,MAAM,GAAGR,OAAO,CAACO,IAAD,CAAP,CAAcpB,WAA7B;AACAqB,UAAM,CAACpB,MAAD,EAASC,QAAT,EAAmBC,QAAnB,CAAN;AACD,GAJD;AAKD,CAdD;;AAgBe;AACbmB,UAAQ,EAAE;AACRd,MAAE,EAAE,cAAwB;AAAA,UAAvBe,KAAuB,uEAAf,EAAe;AAAA,UAAXC,MAAW;;AAC1B,cAAQA,MAAM,CAACd,IAAf;AACE,aAAK,eAAL;AACE,mCACKa,KADL;AAEEhB,kBAAM,EAAEiB,MAAM,CAACb;AAFjB;;AAKF;AACE,iBAAOY,KAAP;AARJ;AAUD;AAZO,GADG;AAgBbX,WAAS,EAATA,SAhBa;AAkBbZ,aAAW,EAAXA;AAlBa,CAAf,E","file":"plugin.ws.js","sourcesContent":["import io from 'socket.io-client';\n\nimport logger from '../../core/util/logger';\n\nconst log = logger('WS', 'blue');\n\nconst wsBootstrap = (socket, dispatch, getState) => {\n  // standard socket.io events\n  [\n    'connect',\n    'connect_error',\n    'connect_timeout',\n    'error',\n    'disconnect',\n    'reconnect',\n    'reconnect_attempt',\n    'reconnecting',\n    'reconnect_error',\n    'reconnect_failed',\n    // 'ping',\n    // 'pong',\n  ].forEach((evtName) => socket.on(evtName, () => {\n    log(`event \"${evtName}\"`);\n    const { ws: { status } } = getState();\n\n    if (status !== socket.connected) {\n      dispatch({ type: 'SET_WS_STATUS', payload: socket.connected });\n    }\n  }));\n};\n\nconst bootstrap = ({\n  settings: { userToken },\n}, dispatch, getState, plugins) => {\n  log('bootstrap ws', !!userToken);\n  if (!userToken) return;\n  const socket = io();\n\n  socket.on('check', (payload, done) => done());\n\n  Object.keys(plugins).forEach((name) => {\n    if (typeof plugins[name].wsBootstrap !== 'function') return;\n    const plugin = plugins[name].wsBootstrap;\n    plugin(socket, dispatch, getState);\n  });\n};\n\nexport default {\n  reducers: {\n    ws: (state = {}, action) => {\n      switch (action.type) {\n        case 'SET_WS_STATUS':\n          return {\n            ...state,\n            status: action.payload,\n          };\n\n        default:\n          return state;\n      }\n    },\n  },\n\n  bootstrap,\n\n  wsBootstrap,\n};\n"],"sourceRoot":""}